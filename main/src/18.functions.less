// -------------------color-----------------------------
.color-fn {
  // color argument must be a color keyword or 3/6 digit hex
  color: color("#afafaf");
  background-color: color("cyan");
}

// -------------------convert-----------------------------
.convert-fn {
  transform: scale(2) rotate(convert(180deg, "rad"));
}

// -------------------data-uri-----------------------------
.data-uri-fn {
  /*
    将一个资源内嵌到样式文件
    如果开启了ieCompat选项，而且资源文件的体积过大，或者是在浏览器中使用，则会使用url()进行回退
    如果没有指定MIME，则Node.js会使用MIME包来决定正确的MIME
  */
  background-image: data-uri('../img/chrome.png');;
}

// -------------------default-----------------------------
#default-space {
  .mixin(@x) when (@x < 0) {
    position: relative;
  }
  .mixin(@x) when (@x > 100) {
    position: absolute;
  }
  .mixin(@x) when not(default()) {
    padding: 20px;
    margin: 40px;
    display: block;
  }
  /*
    .mixin(@x) when (default()){
      float: left;
    }
  */
}

.default-fn {
  &-test-1 {
    #default-space > .mixin(-10);
  }
  &-test-2 {
    #default-space > .mixin(110);
  }
  &-test-3 {
    #default-space > .mixin(50);
  }
}

// -------------------units-----------------------------
#unit-sapce {
  .mixin(@x) when (@x = 0) {
    // 虽然 @x = 0 和 unit(@x) = 0 都能匹配 @x 是 0, 0px, 0%
    // 但是 unit() 要求参数 @x 必须是 number 类型的, test-5, test-6直接导致编译报错,容错性差
    // @x = 0 对 @x 的类型无要求，故test-5, test-6都可以编译通过，通过 default() 生成样式, 以编译后的通过css注释报错
    color: color("red");
    top: unit(@x);
  }
  .mixin(@x) when(isnumber(@x)) and (isunit(@x, px)) and not (@x = 0){
    color: color("green");
    top: @x;
  }
  .mixin(@x) when(isnumber(@x)) and not (isunit(@x, px)) and not (@x = 0){
    color: color("blue");
    top: unit(@x, px);
  }
  .mixin(@x) when (default()) {
    /* error argument */
  }
}

.unit-fn {
  &-test-1 {
    #unit-sapce > .mixin(0px);
  }
  &-test-2 {
    #unit-sapce > .mixin(1px);
  }
  &-test-3 {
    #unit-sapce > .mixin(10);
  }
  &-test-4 {
    #unit-sapce > .mixin(100%);
  }
  &-test-5 {
    #unit-sapce > .mixin("foo");
  }
  &-test-6 {
    #unit-sapce > .mixin(keyword);
  }
}

// -------------------escape-----------------------------
.escape-fn {
  //目前不太可靠
  @uri: escape('http://strip.taobaocdn.com/index?pid=123&refpid=456#test');
  background-image: url("@{uri}");
}

// -------------------e-----------------------------
.e-fn {
  //  认为字符串是一个参数, 返回不带引号的原内容(常用于去除引号)
  // 可以用来输出一些Less并不认可的Css值，包括未验证的Css语法或者一个专有的语法
  //  e("") 可以用 ~"" 代替
  /*filter: e("ms:alwaysHasItsOwnSyntax.For.Stuff()");*/
  filter: ~"ms:alwaysHasItsOwnSyntax.For.Stuff()";
}

// -------------------%-----------------------------
.percentage-fn {
  // d, D, a, A 能被任何类型参数替换 (颜色值, 数字, 转义值, 表达式, ...)
  // s, S 能被除了颜色值以为任何类型参数替换
  // 如果你在字符串中结合使用, 整个字符串参数都会替换进去, 包括它的引号
  @ad: %("replacement %a and %d", #ff4400, "\dirname\filename.less");
  // 如果你在字符串中结合使用, 字符串参数都会替换进去, 不包括它的引号
  @s: %("replacement %s and %s", 5+5, "\dirname\filename.less");
  // a, d，s保持字符串原样; A, D, S对所有的特殊字符, 除了()'~!进行转义
  @AD: %("replacement %A and %D", 5+5, "\dirname\filename.less");
  @S: %("replacement %S and %S", 5+5, "\dirname\filename.less");
  data-ad: ~"@{ad}";
  data-s: ~"@{s}";
  data-AD: ~"@{AD}";
  data-S: ~"@{S}";
}

// -------------------replace-----------------------------
.replace-fn {
  @string-replace: replace("Hello Css!", "Css!", "Less~");
  @pattern-replace-1: replace("one[01] plus one[01] is two[02]", "\[\d+\]", "{Number}", "g");
  @pattern-replace-2: replace("This is a string.", "(string)\.$", "new $1!", "g");
  @remove-comma-and-replace: replace(~"foo-1 and bar-1", "\d", "2");
  data-string-replace: @string-replace;
  data-pattern-replace-1: @pattern-replace-1;
  data-pattern-replace-2: @pattern-replace-2;
  data-remove-comma-and-replace: @remove-comma-and-replace;
}

// -------------------length-----------------------------
.length-fn {
  @list: "peach", 1024, 100%, 10px;
  /* index 是从1开始的 */
  @index: 1;
  @list-length: length(@list);
  @extract-index: extract(@list, @index);
  data-index: @index;
  data-list-lentgh: @list-length;
  data-extract-index: @extract-index;
}

// -------------------math-----------------------------
.math-fn {
  @test-ceil: ceil(2.4);
  @test-floor: floor(2.4);
  @test-percentage: percentage(0.423);
  @test-round-1: round(3.1415926);
  @test-round-2: round(3.1415926, 3);
  @test-sqrt: sqrt(25px);
  @test-abs: abs(-18.6%);
  // 弧度制 - pi() 返回π
  @pi: pi();
  @test-sin-1: sin(@pi/6);
  // 角度制 30度
  @test-sin-2: sin(30deg);
  // 百分度制 1grad = 直角的1%
  @test-sin-3: sin(100grad);
  @test-asin: asin(0.5);
  // cos & acos / tanx & atanx 相同
  // pow & mod 第二个参数的单位被忽略, 返回值的单位同第一个参数
  // pow & mod 都可以处理负数和浮点数
  @test-pow: pow(10px, -2%);
  @test-mod: mod(-26%, -5px);
  // min & max 妖要求参数列表使用相同的单位
  @test-min: min(1px, 2px, 3px);
  @test-max: max(1%, 2%, 3%);
  data-ceil: @test-ceil;
  data-floor: @test-floor;
  data-percentage: @test-percentage;
  data-round-1: @test-round-1;
  data-round-2: @test-round-2;
  data-sqrt: @test-sqrt;
  data-abs: @test-abs;
  data-sin-1: @test-sin-1;
  data-sin-2: @test-sin-2;
  data-sin-3: @test-sin-3;
  data-asin: @test-asin;
  data-pow: @test-pow;
  data-mod: @test-mod;
  data-min: @test-min;
  data-max: @test-max;
}

// -------------------type-----------------------------
.type-fn {
  @test-is-number-1: isnumber(4096);
  @test-is-number-2: isnumber(200px);
  @test-is-number-3: isnumber(50%);
  @test-is-string: isstring("This is a string!");
  @test-is-color-1: iscolor(#ff4400);
  @test-is-color-2: iscolor(green);
  @test-is-keyword: iskeyword(margin);
  @test-is-url: isurl(url("http://www.alibaba.com"));
  @test-is-pixel: ispixel(100px);
  @test-is-em: isem(100em);
  @test-is-percentage: ispercentage(100%);
  @test-is-unit-1: isunit(50%, '%');
  @test-is-unit-2: isunit(50px, px);
  @test-is-unit-3: isunit(a5px, px);
  data-isnumber-1: @test-is-number-1;
  data-isnumber-2: @test-is-number-2;
  data-isnumber-3: @test-is-number-3;
  data-istring: @test-is-string;
  data-iscolor-1: @test-is-color-1;
  data-iscolor-2: @test-is-color-2;
  data-iskeyword: @test-is-keyword;
  data-isurl: @test-is-url;
  data-ispixel: @test-is-pixel;
  data-isem: @test-is-em;
  data-ispercentage: @test-is-percentage;
  data-isunit-1: @test-is-unit-1;
  data-isunit-2: @test-is-unit-2;
  data-isunit-3: @test-is-unit-3;
}